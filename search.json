[{"title":"Hello World","path":"/2023/08/19/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"使用Github Actions实现Hexo博客的自动部署","path":"/2023/08/19/hexo-with-actions/","content":"什么是Github Actions简单来说，Actions是一个工作流（Workflow），可以根据设定的触发条件，执行一连串预设的操作，从而实现工作的自动执行。具体可以参考这篇文章。在写博客场景下，我们希望有这样的一个Actions，当我们将写好的博客推到Github时，Actions能帮我们自动执行hexo g、hexo d这些操作。这样我们在写完博客后，push到Github上就行了，其余的博客编译，部署都是自动的，大大降低了复杂度。 为了实现上面的功能，我们首先需要创建两个仓库：源码库和公开库。 两个仓库 源码库可以使用 hexo init blog来创建一个名为blog的源码库，源码库用来存放博客源文件（markdown文件）。需要将本地创建的源码库push到Github上。推到Github上后，源码库可以设为私有库。 公开库如果我们在源码库里执行hexo g会产生一个public文件夹，这个文件夹就是公开库，在Github上对应$&#123;username&#125;.github.io。 整体的流程是：本地写博客-&gt;push到源码库-&gt;命中Actions的触发条件，自动执行编译-&gt;自动将编译得到的public文件夹内容push到公开库-&gt;完成。 SecretsSecrets可以理解为Actions工作的一个凭证，在Github上创建。创建方式是：头像-&gt;Settings-&gt;Developer Settings-&gt;Personal Access Tokens-&gt;Tokens(classic)-&gt;Generate new token-&gt;选择workflow，如下所示 然后拷贝生成的token，打开Github上的源码库-&gt;Settings-&gt;Secrets and variables创建一个名为PERSONAL_TOKEN的Secrets，如下图 配置Actions这一步我们定义Actions在什么时候触发，触发后执行什么操作。在源码库下新建文件.github/workflows/auto-deploy.yml，例如我的内容如下： 1234567891011121314151617181920212223242526272829303132333435363738name: auto deployon: workflow_dispatch: push: # 触发的条件为push操作，如果向这个仓库push，就是执行下面的jobsjobs: build: runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: auto deploy steps: # 1. 获取源码 - name: Checkout uses: actions/checkout@v3 # 使用 actions/checkout@v3 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ # 2. 配置环境 - name: Setup Node.js 18.12.x uses: actions/setup-node@master with: node-version: &quot;18.12.x&quot; # 3. 生成静态文件 - name: Generate Public Files run: | npm i npm install hexo-cli -g hexo clean &amp;&amp; hexo generate # 4. 部署到 GitHub 仓库（可选） - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: $&#123;&#123; secrets.PERSONAL_TOKEN &#125;&#125; # 这个就是配置的secrets external_repository: $&#123;username&#125;/$&#123;username&#125;.github.io # 需要修改为自己的用户名 publish_branch: gh-pages # 推到了公开库的gh-pages分支 publish_dir: ./public commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125; user_name: &#x27;$&#123;username&#125;&#x27; # 需要修改为自己的用户名 user_email: &#x27;$&#123;username&#125;@exampe.com&#x27; # 需要修改为自己的邮箱 上面的文件定义了一个完整的Actions，最终将编译好的博客push到公开库的gh-pages分支。需要注意的是，如果公开库设定的展示分支不是gh-pages，需要修改为gh-pages。或者修改上面的配置，将publish_branch改为自己的分支。 至此，Actions就被配置好了。我们在源码库写完博客后，git add、git commit、git push到Github上就会自动部署到Github Pages，非常方便。而且，如果我们想在别的电脑上写博客，git clone源码库到本地修改即可，也可以使用Github提供的Codespaces在浏览器里修改后执行push，多端修改也很方便。 参考 零成本！无需服务器也能搭建自己的博客网站，支持CI&#x2F;CD！ 配置Github Action实现自动发布 利用 GitHub Actions 自动部署 Hexo 博客","tags":["教程, hexo"]},{"title":"关于","path":"/about/index.html","content":"游山西村陆游莫笑农家腊酒浑，丰年留客足鸡豚。山重水复疑无路，柳暗花明又一村。箫鼓追随春社近，衣冠简朴古风存。从今若许闲乘月，拄杖无时夜叩门。诗词节选"}]